plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${orgSpringframeworkBootVersion}"
    id 'io.spring.dependency-management' version "${ioSpringDependencyManagementVersion}"
}

allprojects {
    repositories {
        mavenCentral()
    }
}

idea {
    project {
        languageLevel = javaVersion
    }
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.register('buildDockerImage', Exec) {
    dependsOn 'build'

    workingDir = project.rootDir
    executable = 'docker'
    args = [
            'build',
            '-t',
            "${repositoryName}/${imageName}:${imageVersion}",
            '.'
    ]
}

// in future this task can be used/adjusted to push image to the cloud registry
tasks.register('pushDockerImage', Exec) {
    dependsOn 'buildDockerImage'

    workingDir = project.rootDir
    executable = 'docker'
    args = [
            'push',
            "${repositoryName}/${imageName}:${imageVersion}"
    ]
}

dependencies {
    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation "org.springdoc:springdoc-openapi-ui:${springdocOpenapiUiVersion}"

    testAnnotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'junit:junit'
    testImplementation 'org.junit.vintage:junit-vintage-engine'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.assertj:assertj-core'
}

test {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = 'fonoapi-service-mock.jar'
}

springBoot {
    mainClass = 'an.y.ledov.mock.FonoapiMockApp'
}